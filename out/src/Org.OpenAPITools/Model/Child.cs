/*
 * Parent-Child Model API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Child
    /// </summary>
    [DataContract(Name = "Child")]
    public partial class Child : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Child" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Child() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Child" /> class.
        /// </summary>
        /// <param name="name">The name of the person (required).</param>
        /// <param name="favoriteToy">The favorite toy of the child (required).</param>
        public Child(string name = default(string), string favoriteToy = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Child and cannot be null");
            }
            this.Name = name;
            // to ensure "favoriteToy" is required (not null)
            if (favoriteToy == null)
            {
                throw new ArgumentNullException("favoriteToy is a required property for Child and cannot be null");
            }
            this.FavoriteToy = favoriteToy;
        }

        /// <summary>
        /// The name of the person
        /// </summary>
        /// <value>The name of the person</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The favorite toy of the child
        /// </summary>
        /// <value>The favorite toy of the child</value>
        [DataMember(Name = "favoriteToy", IsRequired = true, EmitDefaultValue = true)]
        public string FavoriteToy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Child {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FavoriteToy: ").Append(FavoriteToy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
